组合实体模式（Composite Entity Pattern）：
	组合实体模式用在EJB持久化机制中。一个组合实体是一个EJB实体bean，代表了对象的图解。当更新一个组合实体时，内部依赖对象beans会自动更新，因为它们是由 EJB实体 bean管理的。
	以下是组合实体 bean的参与者：
		组合实体（Composite Entity） - 它是主要的实体 bean。它可以是粗粒的，或者可以包含一个粗粒度对象，用于持续生命周期。
		粗粒度对象（Coarse-Grained Object） - 该对象包含依赖对象。它有自己的生命周期，也能管理依赖对象的生命周期。
		依赖对象（Dependent Object） - 依赖对象是一个持续生命周期依赖于粗粒度对象的对象。
		策略（Strategies） - 策略表示如何实现组合实体。

实例：
	创建作为组合实体的 CompositeEntity 对象。CoarseGrainedObject 是一个包含依赖对象的类。
	CompositeEntityPatternDemo演示类使用 Client 类来演示组合实体模式的用法。
	

	粗粒度与细粒度是一个相对的概念，也不是说对所有会涉及到粒度问题的工作都是一致偏向的。粗粒度和细粒度的区别主要是出于重用的目的。
像类的设计,为尽可能重用,所以采用细粒度的设计模式,将一个复杂的类(粗粒度)拆分成高度重用的职责清晰的类(细粒度)。对于数据库的设计，
原则:尽量减少表的数量与表与表之间的连接,能够设计成一个表的情况就不需要细分,所以可考虑使用粗粒度的设计方式。
	数据库访问控制的粗细粒度问题：根据控制对象的粗细程度，访问控制可分为粗粒度和细粒度两种。
通常把规定访问整个数据库表或由基本表导出的视图的某个层称为粗粒度的访问控制，而细粒度控制则是把安全控制细化到数据库的行级或列级。
