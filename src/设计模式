设计模式：
	对接口编程而不是对实现编程。（依赖于抽象而不依赖于具体。）
	优先使用对象组合而不是继承。（高内聚，低耦合。）
	开闭原则（Open Close Principle）：对扩展开放，对修改关闭。
	
抽象类：
	如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。
	抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。
	由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。也是因为这个原因，通常在设计阶段决定要不要设计抽象类。
	在Java中抽象类表示的是一种继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口。
	在Java语言中使用abstract class来定义抽象类。
	
抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。
构造方法，类方法（用static修饰的方法）不能声明为抽象方法。
	
抽象方法：
	 Abstract关键字用来声明抽象方法，抽象方法只包含一个方法名，而没有方法体。抽象方法没有定义，方法名后面直接跟一个分号，而不是花括号。
	 声明抽象方法会造成以下两个结果：
	 	如果一个类包含抽象方法，那么该类必须是抽象类。
	 	任何子类必须重写父类的抽象方法，或者声明自身为抽象类。
	 	
接口：
	 接口，在JAVA编程语言中是一个抽象类型，是抽象方法的集合。
	 接口并不是类。类描述对象的属性和方法。接口则包含类要实现的方法。
	 除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。
	 接口无法被实例化。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。
	 （晦涩难懂）在 Java 中，接口可用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。
	 接口不能用于实例化对象。 
	 接口没有构造方法。 
	 接口中所有的方法必须是抽象方法。 
	 接口不能包含成员变量，除了 static 和 final变量。 
	 接口支持多继承。（接口的多继承中extends关键字只需要使用一次，在其后跟着继承接口。）一个接口能继承另一个接口
	 接口中每一个方法都是隐式抽象的,接口中的方法会被隐式的指定为 public abstract（只能是 public abstract，其他修饰符都会报错）。
	 接口中可以含有变量，但是接口中的变量会被隐式的指定为 public static final 变量（并且只能是 public，用 private 修饰会报编译错误）。
	 接口是隐式抽象的，当声明一个接口的时候，不必使用abstract关键字。
	 接口中每一个方法也是隐式抽象的，声明时同样不需要abstract关键字。
	 接口中的方法都是公有的。
	 
接口的实现：
	类在实现接口的方法时，不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常。
	类在重写方法时要保持一致的方法名，并且应该保持相同或者相兼容的返回值类型。
	如果实现接口的类是抽象类，那么就没必要实现该接口的方法。
	
什么时候使用抽象类和接口
	如果你拥有一些方法并且想让它们中的一些有默认实现，那么使用抽象类吧。
	如果你想实现多重继承，那么你必须使用接口。由于Java不支持多继承，子类不能够继承多个类，但可以实现多个接口。因此你就可以使用接口来解决它。
	如果基本功能在不断改变，那么就需要使用抽象类。如果不断改变基本功能并且使用接口，那么就需要改变所有实现了该接口的类。



1 创建型模式：提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。 
	工厂模式（Factory Pattern）
	抽象工厂模式（Abstract Factory Pattern）
	单例模式（Singleton Pattern）
	建造者模式（Builder Pattern）
	原型模式（Prototype Pattern）
2 结构型模式：关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。 
	适配器模式（Adapter Pattern）
	桥接模式（Bridge Pattern）
	过滤器模式（Filter、Criteria Pattern）
	组合模式（Composite Pattern）
	装饰器模式（Decorator Pattern）
	外观模式（Facade Pattern）
	享元模式（Flyweight Pattern）
	代理模式（Proxy Pattern）
3 行为型模式：特别关注对象之间的通信。 责任链模式（Chain of Responsibility Pattern）
	命令模式（Command Pattern）
	解释器模式（Interpreter Pattern）
	迭代器模式（Iterator Pattern）
	中介者模式（Mediator Pattern）
	备忘录模式（Memento Pattern）
	观察者模式（Observer Pattern）
	状态模式（State Pattern）
	空对象模式（Null Object Pattern）
	策略模式（Strategy Pattern）
	模板模式（Template Pattern）
	访问者模式（Visitor Pattern）
4 J2EE 模式：特别关注表示层。这些模式是由 Sun Java Center 鉴定的。 
	MVC 模式（MVC Pattern）
	业务代表模式（Business Delegate Pattern）
	组合实体模式（Composite Entity Pattern）
	数据访问对象模式（Data Access Object Pattern）
	前端控制器模式（Front Controller Pattern）
	拦截过滤器模式（Intercepting Filter Pattern）
	服务定位器模式（Service Locator Pattern）
	传输对象模式（Transfer Object Pattern）
