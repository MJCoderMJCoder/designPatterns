装饰器模式（Decorator Pattern）：
	允许向一个现有的对象添加新的功能，同时又不改变其结构。它是作为现有的类的一个包装。
	这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。
	意图：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。
	主要解决：一般的，为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。
	何时使用：在不想增加很多子类的情况下扩展类。
	如何解决：将具体功能职责划分，同时继承装饰者模式。
	关键代码： 1、Component（成分 组件 [电子] 元件 组件 组成部分）类充当抽象角色，不应该具体实现。 2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。 
	应用实例：不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。 
	优点：装饰类和被装饰类可以独立发展，不会相互耦合；装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。
	缺点：多层装饰比较复杂。
	使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。 
	注意事项：可代替继承。
	
实例：
	将把一个形状装饰上不同的颜色，同时又不改变形状类。
	创建一个 Shape 接口和实现了 Shape 接口的实体类。
	然后创建一个实现了 Shape 接口的抽象装饰类 ShapeDecorator，并把 Shape 对象作为它的实例变量。
	RedShapeDecorator 是实现了 ShapeDecorator 的实体类。
	DecoratorPatternDemo，演示类使用 RedShapeDecorator 来装饰 Shape 对象。
	
一个更易理解的实例：
	装饰模式为已有类动态附加额外的功能就像LOL、王者荣耀等类Dota游戏中，英雄升级一样。
	每次英雄升级都会附加一个额外技能点学习技能。
	具体的英雄就是ConcreteComponent，技能栏就是装饰器Decorator，每个技能就是ConcreteDecorator；
	