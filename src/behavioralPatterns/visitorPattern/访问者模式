访问者模式（Visitor Pattern）：
	在访问者模式中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。
	根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。
	意图：主要将数据结构与数据操作分离。（晦涩难懂：属性、抽象行为	和	具体的行为实现分离）
	主要解决：稳定的数据结构和易变的操作耦合问题。（晦涩难懂：稳定的属性和抽象行为；具体行为实现）
	何时使用：需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作"污染"这些对象的类，使用访问者模式将这些封装到类中。
	如何解决：在被访问的类里面加一个对外提供接待访问者的接口。
	关键代码：在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。
	应用实例：您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。
	优点： 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。 
	缺点： 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。 
	使用场景： 1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。
			2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作"污染"这些对象的类，也不希望在增加新操作时修改这些类。
	注意事项：访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。
	
实例：
	创建一个定义接受操作的 ComputerPart 接口。
	Keyboard、Mouse、Monitor 和 Computer 是实现了 ComputerPart 接口的实体类。
	定义另一个接口 ComputerPartVisitor，它定义了访问者类的操作。Computer 使用实体访问者来执行相应的动作。
	VisitorPatternDemo演示类使用 Computer、ComputerPartVisitor 类来演示访问者模式的用法。
	


1）数据结构：数据模型中的数据结构主要描述数据的类型、内容、性质以及数据间的联系等。数据结构是数据模型的基础，数据操作和约束都建立在数据结构上。不同的数据结构具有不同的操作和约束。
2）数据操作：数据模型中数据操作主要描述在相应的数据结构上的操作类型和操作方式。
3）数据约束：数据模型中的数据约束主要描述数据结构内数据间的语法、词义联系、他们之间的制约和依存关系，以及数据动态变化的规则，以保证数据的正确、有效和相容。

 